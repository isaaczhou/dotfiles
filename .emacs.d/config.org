#+TITLE: Emacs Configuration
#+AUTHOR: Isaac Zhou

I've been using Emacs extensively since the summer of 2013, and along
the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

If you see any keybindings that seem weird to you, it's probably
because I type with the Dvorak keyboard layout, so things'll probably
seem strange on other keyboard layouts. I may assign a keybinding just
because it's more on convenient on Dvorak. Though for the most part, I
try to follow Emacs and assign bindings by mnemonics, would should
make sense for any layout.

* Quickly Visiting Key Files

** config file
 #+begin_src emacs-lisp
(defun iz/visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(global-set-key (kbd "C-x e") 'iz/visit-emacs-config)
 #+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Isaac Zhou"
      user-mail-address "isaaczhou85@gmail.com"
      calendar-latitude 40.7
      calendar-longitude 74.0
      calendar-location-name "New York, NY")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Theme

** Leuven theme
I like Leuven theme now
#+begin_src emacs-lisp
(use-package leuven-theme)
(require 'powerline)
(powerline-default-theme)
#+end_src

** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp
;; (use-package cyberpunk-theme
;;   :if (window-system)
;;   :ensure t
;;   :init
;;   (progn
;;     (load-theme 'cyberpunk t)
;;     (set-face-attribute `mode-line nil
;;                         :box nil)
;;     (set-face-attribute `mode-line-inactive nil
;;                         :box nil)))
#+end_src

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

** Waher theme

#+begin_src emacs-lisp :tangle no
(use-package waher-theme
  if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+end_src

** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "<f9>" 'switch-theme)
(bind-key "<f8>" 'disable-active-themes)
#+end_src
* Font

#+begin_src emacs-lisp
(when (window-system)
    (set-default-font "Fira Code Light 15"))
#+end_src

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(require 'org-install)
(require 'ob-ipython)
(setq org-babel-python-command "/home/isaac/anaconda3/bin/python3")
(setq py-python-command "/home/isaac/anaconda3/bin/python3")

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (ipython . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "ipython")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "js")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src

** Set up native python 
#+begin_src emacs-lisp
(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org exporting
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC

** Beautiful Bullets
I want beautiful bullets, not *

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
(lambda () (org-bullets-mode t)))
#+END_SRC

** Fancy Lambda
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

* Tramp

#+begin_src emacs-lisp :tangle no
(use-package tramp)
#+end_src

* Locate

Using macOS Spotlight within Emacs by modifying the ~locate~ function.

I usually use [[*Helm][~helm-locate~]], which does live updates the spotlight
search list as you type a query.

#+begin_src emacs-lisp
;; mdfind is the command line interface to Spotlight
(setq locate-command "mdfind")
#+end_src

* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("H-t" . transpose-frame))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("s-<f10>" . whitespace-mode))
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+END_SRC

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src
#+end_src


** C-Eldoc

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src


** Helm

#+begin_src emacs-lisp
;; (require 'helm-config)
;; (setq helm-mode t)
;; (setq helm-projectile t)
;; (setq helm-swoop t)
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag :defer 10 :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                ;; helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode)
          (use-package helm-swoop
            :ensure t
            :bind ("H-w" . helm-swoop))
          )
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-c f" . copy-file)
         ("C-c d" . copy-directory)
         ("C-c n" . rename-file)
         )
  )
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Edit With Emacs

Editing input boxes from Chrome with Emacs. Pretty useful to keep all
significant text-writing on the web within emacs. I typically use this
with posts on Discourse, which has a post editor that overrides normal
Emacs key bindings with other functions. As such, ~markdown-mode~ is
used.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :ensure t
  :defer t
  :config (setq elfeed-feeds
                '("http://feeds.feedburner.com/gonintendo/news"
                  "http://usesthis.com/feed/")))
#+end_src

** Emacs IPython Notebook
#+begin_src emacs-lisp
(use-package ein
  :ensure t
  :defer t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Floobits

Using [[https://floobits.com/][Floobits]] for code collaboration.

#+begin_src emacs-lisp :tangle no
(use-package floobits
  :ensure t
  :defer t)
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer 10
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+end_src


** Gists

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :commands gist-list)
#+END_SRC

** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

* Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :bind ("s-<f6>" . olivetti-mode))
#+end_src

** Perspective

Workspaces in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :ensure t
  :defer t
  :config (persp-mode))
#+end_src

** Projectile

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://batsov.com/projectile/

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind ("C-c p p" . projectile-switch-project)
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp
(use-package python-mode
  :defer t
  :ensure t)
#+end_src

** Python Environment

#+begin_src emacs-lisp
(setenv "WORKON_HOME" "/home/isaac/anaconda3/envs/")
(pyvenv-mode 1)
#+end_src

** Racket

Starting to use Racket now, mainly for programming paradigms class,
though I'm looking forward to some "REPL-driven development" whenever
I get the chance.

#+begin_src emacs-lisp
(use-package racket-mode
  :ensure t
  :commands racket-mode
  :config
  (setq racket-smart-open-bracket-enable t))

(use-package geiser
  :ensure t
  :defer t
  :config
  (setq geiser-default-implementation '(racket)))
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartparens mode

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :defer t
  :diminish smartparens-mode
  :config
  (add-to-list 'sp--lisp-modes 'racket-mode)
  (add-to-list 'sp--lisp-modes 'geiser-mode)
  (require 'smartparens-config)

  ;; Set up some pairings for org mode markup. These pairings won't
  ;; activate by default; they'll only apply for wrapping regions.
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap)))
#+end_src

** Smartscan

#+BEGIN_QUOTE
Quickly jumps between other symbols found at point in Emacs.
#+END_QUOTE
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1)
  :bind (("s-n" . smartscan-symbol-go-forward)
         ("s-p" . smartscan-symbol-go-backward)))
#+end_src

** Smex

Smex integrates ido with ~M-x~. I used to use this before moving on to
[[*Helm][helm]].

#+begin_src emacs-lisp
(use-package smex
  :if (not (featurep 'helm-mode))
  :ensure t
  :bind ("M-x" . smex))
#+end_src


** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+end_src

** Typescript mode

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :defer t)
#+END_SRC

** Visual-regexp

#+begin_src emacs-lisp
(use-package visual-regexp
  :ensure t
  :init
  (use-package visual-regexp-steroids :ensure t)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark) ; Need multiple cursors
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
#+end_src

** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+end_src

** Yasnippet

Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
and have also modified them and added my own.

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (yas-global-mode))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop

#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("M-<f12>" . shell-pop))
#+END_SRC


** Quickrun

#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("H-q" . quickrun))
#+END_SRC

** Visible mode

I found out about this mode by looking through simple.el. I use it to
see raw org-mode files without going to a different mode like
text-mode, which is what I had done in order to see invisible text
(with org hyperlinks). The entire buffer contents will be visible
while still being in org mode.

#+begin_src emacs-lisp
(use-package visible-mode
  :bind (("H-v" . visible-mode)
         ("s-<f2>" . visible-mode)))
#+end_src

** Virtualenvwrapper

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :defer t
  :config
  (setq venv-location "~/anaconda3/envs/"))
#+END_SRC


** XQuery mode

#+BEGIN_SRC emacs-lisp
(use-package xquery-mode
  :ensure t
  :defer t)
#+END_SRC

** LaTeX Extra

#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :defer t
  :ensure t)
#+END_SRC

** LaTeX Preview Mode

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :ensure t
  :defer t)
#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)
#+END_SRC

** Crux

Collection of Ridiculously Useful eXtensions

#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c u" . crux-view-url)))
#+END_SRC

* Languages
** C/Java

I don't like the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
    {
    }
  return 0;
}
#+end_src

#+begin_src java
switch (number)
    {
    case 1:
        doStuff();
        break;
    case 2:
        doStuff();
        break;
    default:
        break;
    }
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my-c-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 4))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook 'my-c-mode-hook)
#+end_src

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t)
#+END_SRC

* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src


** Docview keybindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src


** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src

* Python IDE
#+begin_src emacs-lisp
(require 'package)
(package-initialize)

(defvar local-packages '(projectile auto-complete epc jedi))

(defun uninstalled-packages (packages)
  (delq nil
	(mapcar (lambda (p) (if (package-installed-p p nil) nil p)) packages)))

;; This delightful bit adapted from:
;; http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/

(let ((need-to-install (uninstalled-packages local-packages)))
  (when need-to-install
    (progn
      (package-refresh-contents)
      (dolist (p need-to-install)
	(package-install p)))))

;; Global Jedi config vars

(defvar jedi-config:use-system-python nil
  "Will use system python and active environment for Jedi server.
May be necessary for some GUI environments (e.g., Mac OS X)")

(defvar jedi-config:with-virtualenv nil
  "Set to non-nil to point to a particular virtualenv.")

(defvar jedi-config:vcs-root-sentinel ".git")

(defvar jedi-config:python-module-sentinel "__init__.py")

;; Helper functions

;; Small helper to scrape text from shell output
(defun get-shell-output (cmd)
  (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string cmd)))

;; Ensure that PATH is taken from shell
;; Necessary on some environments without virtualenv
;; Taken from: http://stackoverflow.com/questions/8606954/path-and-exec-path-set-but-emacs-does-not-find-executable

(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell."
  (interactive)
  (let ((path-from-shell (get-shell-output "$SHELL --login -i -c 'echo $PATH'")))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; Package specific initialization
(add-hook
 'after-init-hook
 '(lambda ()

    ;; Looks like you need Emacs 24 for projectile
    (unless (< emacs-major-version 24)
      (require 'projectile)
      (projectile-global-mode))

    ;; Auto-complete
    (require 'auto-complete-config)
    (ac-config-default)

    ;; Uncomment next line if you like the menu right away
    ;; (setq ac-show-menu-immediately-on-auto-complete t)

    ;; Can also express in terms of ac-delay var, e.g.:
    ;;   (setq ac-auto-show-menu (* ac-delay 2))

    ;; Jedi
    (require 'jedi)

    ;; (Many) config helpers follow

    ;; Alternative methods of finding the current project root
    ;; Method 1: basic
    (defun get-project-root (buf repo-file &optional init-file)
      "Just uses the vc-find-root function to figure out the project root.
       Won't always work for some directory layouts."
      (let* ((buf-dir (expand-file-name (file-name-directory (buffer-file-name buf))))
	     (project-root (vc-find-root buf-dir repo-file)))
	(if project-root
	    (expand-file-name project-root)
	  nil)))

    ;; Method 2: slightly more robust
    (defun get-project-root-with-file (buf repo-file &optional init-file)
      "Guesses that the python root is the less 'deep' of either:
         -- the root directory of the repository, or
         -- the directory before the first directory after the root
            having the init-file file (e.g., '__init__.py'."

      ;; make list of directories from root, removing empty
      (defun make-dir-list (path)
        (delq nil (mapcar (lambda (x) (and (not (string= x "")) x))
                          (split-string path "/"))))
      ;; convert a list of directories to a path starting at "/"
      (defun dir-list-to-path (dirs)
        (mapconcat 'identity (cons "" dirs) "/"))
      ;; a little something to try to find the "best" root directory
      (defun try-find-best-root (base-dir buffer-dir current)
        (cond
         (base-dir ;; traverse until we reach the base
          (try-find-best-root (cdr base-dir) (cdr buffer-dir)
                              (append current (list (car buffer-dir)))))

         (buffer-dir ;; try until we hit the current directory
          (let* ((next-dir (append current (list (car buffer-dir))))
                 (file-file (concat (dir-list-to-path next-dir) "/" init-file)))
            (if (file-exists-p file-file)
                (dir-list-to-path current)
              (try-find-best-root nil (cdr buffer-dir) next-dir))))

         (t nil)))

      (let* ((buffer-dir (expand-file-name (file-name-directory (buffer-file-name buf))))
             (vc-root-dir (vc-find-root buffer-dir repo-file)))
        (if (and init-file vc-root-dir)
            (try-find-best-root
             (make-dir-list (expand-file-name vc-root-dir))
             (make-dir-list buffer-dir)
             '())
          vc-root-dir))) ;; default to vc root if init file not given

    ;; Set this variable to find project root
    (defvar jedi-config:find-root-function 'get-project-root-with-file)

    (defun current-buffer-project-root ()
      (funcall jedi-config:find-root-function
               (current-buffer)
               jedi-config:vcs-root-sentinel
               jedi-config:python-module-sentinel))

    (defun jedi-config:setup-server-args ()
      ;; little helper macro for building the arglist
      (defmacro add-args (arg-list arg-name arg-value)
        `(setq ,arg-list (append ,arg-list (list ,arg-name ,arg-value))))
      ;; and now define the args
      (let ((project-root (current-buffer-project-root)))

        (make-local-variable 'jedi:server-args)

        (when project-root
          (message (format "Adding system path: %s" project-root))
          (add-args jedi:server-args "--sys-path" project-root))

        (when jedi-config:with-virtualenv
          (message (format "Adding virtualenv: %s" jedi-config:with-virtualenv))
          (add-args jedi:server-args "--virtual-env" jedi-config:with-virtualenv))))

    ;; Use system python
    (defun jedi-config:set-python-executable ()
      (set-exec-path-from-shell-PATH)
      (make-local-variable 'jedi:server-command)
      (set 'jedi:server-command
           (list (executable-find "python") ;; may need help if running from GUI
                 (cadr default-jedi-server-command))))

    ;; Now hook everything up
    ;; Hook up to autocomplete
    (add-to-list 'ac-sources 'ac-source-jedi-direct)

    ;; Enable Jedi setup on mode start
    (add-hook 'python-mode-hook 'jedi:setup)

    ;; Buffer-specific server options
    (add-hook 'python-mode-hook
              'jedi-config:setup-server-args)
    (when jedi-config:use-system-python
      (add-hook 'python-mode-hook
                'jedi-config:set-python-executable))

    ;; And custom keybindings
    (defun jedi-config:setup-keys ()
      (local-set-key (kbd "M-.") 'jedi:goto-definition)
      (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
      (local-set-key (kbd "M-?") 'jedi:show-doc)
      (local-set-key (kbd "M-/") 'jedi:get-in-function-call))

    ;; Don't let tooltip show up automatically
    (setq jedi:get-in-function-call-delay 10000000)
    ;; Start completion at method dot
    (setq jedi:complete-on-dot t)
    ;; Use custom keybinds
    (add-hook 'python-mode-hook 'jedi-config:setup-keys)

    ))
;; End of Python IDE set up
#+end_src

* General Setup
  #+begin_src emacs-lisp
(electric-pair-mode 1)
  #+end_src

* Snippet
I want to load snippets in orgmode
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

* Autocomplete
#+begin_src emacs-lisp
(ac-config-default)
(global-auto-complete-mode t)
(setq ac-auto-show-menu    0.2)
(setq ac-delay             0.2)
(setq ac-menu-height       20)
(setq ac-auto-start t)
(setq ac-show-menu-immediately-on-auto-complete t)
#+end_src

* Blogging
** Ox-Pandoc Setup
#+begin_src emacs-lisp
(use-package ox-pandoc
  :after ox
  :if (executable-find "pandoc")
  :config
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)
                             (latex-engine . xelatex)
                             (mathjax . t)
                             (parse-raw . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil))))
#+end_src

** Exporting Function
#+begin_src emacs-lisp
(defun isaac/org-hugo-export ()
  "Export current subheading to markdown using pandoc."
  (interactive)
  ;; Save cursor position
  (save-excursion
    ;; Go to top level heading for subtree
    (unless (eq (org-current-level) 1)
      (org-up-heading-all 10))
    ;; Set export format, pandoc options, post properties
    (let* ((org-pandoc-format 'markdown)
           (org-pandoc-options-for-markdown '((standalone . t)
                                              (atx-headers . t)
                                              (columns . 79)))
           (hl (org-element-at-point))
           (filename (org-element-property :EXPORT_FILE_NAME hl))
           (title (format "\"%s\"" (org-element-property :title hl)))
           (slug (format "\"%s\"" (org-element-property :SLUG hl)))
           (date (format "\"%s\"" (org-element-property :DATE hl)))
           (tags (org-get-tags-at))
           (categories
            (format "[\"%s\"]" (mapconcat 'identity tags "\",\""))))
      (if (string= (org-get-todo-state) "DRAFT")
          (message "Draft not exported")
        (progn
          ;; Make the export
          (org-export-to-file
              'pandoc
              (org-export-output-file-name
               (concat (make-temp-name ".tmp") ".org") t)
            nil t nil nil nil
            (lambda (f)
              (org-pandoc-run-to-buffer-or-file f 'markdown t nil)))
          ;; Use advice-add to add advice to existing process sentinel
          ;; to modify file /after/ the export process has finished.
          (advice-add
           #'org-pandoc-sentinel
           :after
           `(lambda (process event)
              (with-temp-file ,filename
                (insert-file-contents ,filename)
                (goto-char (point-min))
                ;; Remove default header
                (re-search-forward "---\\(.\\|\n\\)+?---\n\n")
                (replace-match "")
                (goto-char (point-min))
                ;; Insert new properties
                (insert
                 (format
                  "---\ntitle: %s\nslug: %s\ndate: %s\ncategories: %s\n---\n\n"
                  ,title ,slug ,date ,categories))
                ;; Demote headings and tweak code blocks
                (dolist (reps '(("^#" . "##")
                                ("``` {\\.\\(.+?\\)}" . "```\\1")))
                  (goto-char (point-min))
                  (while (re-search-forward (car reps) nil t)
                    (replace-match (cdr reps))))))
           '((name . "hugo-advice")))
          ;; We don't want our advice to stick around afterwards
          (advice-remove #'org-pandoc-sentinel 'hugo-advice)
          (when (string= (org-get-todo-state) "↑")
            (org-todo)))))))
#+end_src
** Ox-Hugo
#+begin_src emacs-lisp
(require 'ox-hugo)
#+end_src

* Anaconda Mode
** Add anaconda to python
 #+begin_src emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(add-hook 'ob-ipython-mode-hook 'anaconda-mode)
(add-hook 'ob-ipython-mode-hook 'anaconda-eldoc-mode)
 #+end_src

** Additional Python
#+begin_src emacs-lisp
(add-to-list 'python-shell-extra-pythonpaths "/home/isaac/anaconda3/bin/python")
#+end_src


** exec-path-from-shell

#+begin_src emacs-lisp
(exec-path-from-shell-initialize)
#+end_src

#+begin_src emacs-lisp
(defun set-exec-path-from-shell-PATH ()
        (interactive)
        (let ((path-from-shell (replace-regexp-in-string "^.*\n.*shell\n" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)
#+end_src

* Embed Youtube Videos
#+begin_src emacs-lisp
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+end_src

* Web Development

** Web-mode for jsx
 #+begin_src emacs-lisp
;; use web-mode for .jsx files
;; http://www.flycheck.org/manual/latest/index.html
(require 'flycheck)

(add-to-list 'auto-mode-alist '("\\.jsx$" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.js$" . rjsx-mode))
;; (add-to-list 'auto-mode-alist '("\\.ejs" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.ejs" . emmet-mode))


;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
(defadvice js-jsx-indent-line (after js-jsx-indent-line-after-hack activate)
  "Workaround sgml-mode and follow airbnb component style."
  (let* ((cur-line (buffer-substring-no-properties
                    (line-beginning-position)
                    (line-end-position))))
    (if (string-match "^\\( +\\)\/?> *$" cur-line)
      (let* ((empty-spaces (match-string 1 cur-line)))
        (replace-regexp empty-spaces
                        (make-string (- (length empty-spaces) sgml-basic-offset) 32)
                        nil
                        (line-beginning-position) (line-end-position))))))
 #+end_src


** Skewer mode

 Live coding for HTML/CSS/JavaScript.

 #+begin_src emacs-lisp
(use-package skewer-mode
  :commands skewer-mode
  :ensure t
  :config (skewer-setup))
 #+end_src


** RJSX mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
(add-hook 'web-mode-hook  'rjsx-mode-hook)
#+end_src


** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(require 'emmet-mode)
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode)
  (add-hook 'multi-web-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'js2-mode-hook 'emmet-mode)
)
#+end_src


** Javascript
Now I use RJSX, I don't need js2 mode
 #+begin_src emacs-lisp
;; (add-hook 'js2-mode-hook 'ac-js2-mode)
 #+end_src


** JSX syntax highlight
#+begin_src emacs-lisp
;; for better jsx syntax-highlighting in web-mode
;; - courtesy of Patrick @halbtuerke
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil))
      ad-do-it)
    ad-do-it))
#+end_src


** Customizing flycheck to use local node_modules eslint if exists

#+begin_src emacs-lisp
;; use local eslint from node_modules before global
;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+end_src


** Prettier
 #+begin_src emacs-lisp
(require 'prettier-js)
(add-hook 'js2-mode-hook 'prettier-js-mode)
(add-hook 'web-mode-hook 'prettier-js-mode)
(add-hook 'rjsx-mode-hook 'prettier-js-mode)
(add-hook 'js-mode-hook 'prettier-js-mode)
(add-hook 'multi-web-mode-hook 'prettier-js-mode)

(setq prettier-js-args '(
  ;; "--trailing-comma" "all"
  "--bracket-spacing" "false"
))

(defun enable-minor-mode (my-pair)
  "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
  (if (buffer-file-name)
      (if (string-match (car my-pair) buffer-file-name)
      (funcall (cdr my-pair)))))

(add-hook 'web-mode-hook #'(lambda ()
                            (enable-minor-mode
                             '("\\.js?\\'" . prettier-js-mode))))
 #+end_src

 
** HTML Mode
#+begin_src emacs-lisp
;; (add-hook 'html-mode-hook  'html-mode)
;; (add-hook 'html-mode-hook 'emmet-mode)
;; (add-hook 'html-mode-hook 'multi-web-mode)
#+end_src

 
** CSS Mode
#+begin_src emacs-lisp
;; (add-hook 'css-mode-hook  'css-mode)
(add-hook 'css-mode-hook 'rainbow-mode)
#+end_src

#+RESULTS:
| rainbow-mode | css-mode | emmet-mode | skewer-css-mode | ac-css-mode-setup |


** Indent
*** Python
#+begin_src emacs-lisp
(setq python-indent-guess-indent-offset nil)
(setq python-indent-offset 4)
#+end_src

*** JSX
#+begin_src emacs-lisp
;; adjust indents for web-mode to 2 spaces
(defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-js-indent-offset 2)
  ;; (setq js-mode-indent-level 2)
  ;; (setq-default js2-basic-offset 2)
  ;; (setq javascript-indent-level 2)
  (setq web-mode-code-indent-offset 2))
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+end_src


*** Aggressive Indent
#+begin_src emacs-lisp
;; (global-aggressive-indent-mode 1)
#+end_src

** Move line up and down
#+begin_src emacs-lisp
(defun move-text-internal (arg)
   (cond
    ((and mark-active transient-mark-mode)
     (if (> (point) (mark))
            (exchange-point-and-mark))
     (let ((column (current-column))
              (text (delete-and-extract-region (point) (mark))))
       (forward-line arg)
       (move-to-column column t)
       (set-mark (point))
       (insert text)
       (exchange-point-and-mark)
       (setq deactivate-mark nil)))
    (t
     (beginning-of-line)
     (when (or (> arg 0) (not (bobp)))
       (forward-line)
       (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg))
       (forward-line -1)))))

(defun move-text-down (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines down."
   (interactive "*p")
   (move-text-internal arg))

(defun move-text-up (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines up."
   (interactive "*p")
   (move-text-internal (- arg)))

(global-set-key [\M-\S-up] 'move-text-up)
(global-set-key [\M-\S-down] 'move-text-down)
#+end_src

* turn off warning
#+begin_src emacs-lisp
(setq warning-minimum-level :emergency)
#+end_src

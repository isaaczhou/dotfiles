+++
title = "Data Structure Notes"
author = ["Isaac Zhou"]
lastmod = 2019-03-02T00:35:50-05:00
draft = false
+++

## Array {#array}


### Definition {#definition}

-   把数据码成一排进行存放
-   In Java, all data must be of the same type
-   In Python, we can store different data types
-   Index, usually start from 0 (R starts from 1)


### Loop Through an Array {#loop-through-an-array}

-   数组支持for, forEach因为它具有可迭代，可遍历的能力 (iterable)


### 二次封装属于我们自己的数组 {#二次封装属于我们自己的数组}


#### 数组最大的优点：快速查询 {#数组最大的优点-快速查询}


#### 索引最好有语义 {#索引最好有语义}


#### 并非所有有语义的索引都适用于数组 {#并非所有有语义的索引都适用于数组}

-    比如ID号，开辟的空间大，可能会浪费


#### 制作属于我们自己的数组类 {#制作属于我们自己的数组类}

-    索引没有语义，如何表示没有元素？

-    如何添加元素？如何删除元素？

-    增删改查

-    向指定位置添加元素

    -    确定数组中有足够的空间：size < capacity

    -    确定插入的位置合法：index >= 0 并且 index <= capacity

-    Dynamic Array Code

    用Java实现动态数组

    ```java
    public class DynaArray {
      private int[] data;
      private int size;

      // 构造函数， 传入数组的容量capacity构造DynaArray
      public DynaArray(int capacity) {
        data = new int[capacity];
        size = 0;
      }

      // 无参数的构造函数，默认容量capacity为10
      public DynaArray() {
        this(10);
      }

      // 获取数组中的元素个数
      public int getSize() {
        return size;
      }

      // 获取数组的容量
      public int getCapacity() {
        return data.length;
      }

      // 查询数组是否为空
      public boolean isEmpty() {
        return size == 0;
      }

      // 向数组末尾添加元素
      public void addLast(int e) {
        add(size, e);
      }

      // 向数组头部添加元素
      public void addFirst(int e) {
        add(0, e);
      }

      // 向指定位置添加元素
      public void add(int index, int e) {
        if (size >= data.length) {
          throw new IllegalArgumentException("addLast Failed, Array is full");
        }
        if (index < 0 || index > size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        for (int i = size - 1; i >= index; i--) {
          data[i + 1] = data[i];
        }
        data[index] = e;
        size++;
      }

      // 获取index索引位置的元素
      int get(int index) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        return data[index];
      }

      // 更新index索引位置的元素
      void set(int index, int e) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        data[index] = e;
      }
      // 查找数组中是否有元素e
      public boolean contains(int e) {
        for (int d : data) {
          if (d == e) {
            return true;
          }
        }
        return false;
      }
      // 查找包含元素的索引,如果不存在，返回-1
      public int find(int e) {
        for (int i = 0; i < size; i++) {
          if (data[i]==e) {
            return i;
          }
        }
        return -1;
      }

      // 删除索引位置的元素，返回删除的元素
      public int remove(int index) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        int deleted = data[index];

        for (int i = index + 1; i < size; i++) {
          data[i - 1] = data[i];
        }
        size--;
        return deleted;
      }

      // 快捷删除第一个
      public int removeFirst() {
        return remove(0);
      }

      // 快捷删除最后一个
      public int removeLast() {
        return remove(size - 1);
      }

      // 删除元素e
      public void removeElement(int e) {
        int idx = find(e);
        if (idx != -1) {
          remove(idx);
        }
      }

      @Override
      public String toString() {
        StringBuilder res = new StringBuilder();
        res.append(String.format("Dynamic Array: size=%d, capacity=%d\n", size, data.length));
        res.append("[");
        for (int i = 0; i < size; i++) {
          // res.append(String.format("%d", data[i]));
          res.append(data[i]);
          if (i != size - 1) {
            res.append(", ");
          }
        }
        res.append("]");

        return res.toString();
      }

      public static void main(String[] args) {
        DynaArray arr = new DynaArray(20);
        for (int i = 0; i < 10; i++) {
          arr.addLast(i);
        }
        System.out.println(arr);

        arr.add(1, 100);
        System.out.println(arr);

        arr.addFirst(-5);
        System.out.println(arr);

        arr.remove(2);
        System.out.println(arr);

        arr.removeFirst();
        System.out.println(arr);

        arr.removeElement(4);
        System.out.println(arr);
      }
    }
    ```

    ```text
     Dynamic Array: size=10, capacity=20
     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     Dynamic Array: size=11, capacity=20
     [0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     Dynamic Array: size=12, capacity=20
     [-5, 0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     Dynamic Array: size=11, capacity=20
     [-5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     Dynamic Array: size=10, capacity=20
     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     Dynamic Array: size=9, capacity=20
     [0, 1, 2, 3, 5, 6, 7, 8, 9]
    ```


#### 使用泛型 {#使用泛型}

-    让我们的数据结构可以放置“任何”数据类型

-    不可以是基本数据类型，只能是类对象

    -    8种基本数据类型

        boolean, byte, char, short, int, long, float, double

    -    每个基本数据类型都有对应的包装类

        Boolean, Byte, Char, Short, Int, Long, Float, Double

-    Autoboxing 基本类型自动转化为包装类

-    General Dynamic Array Code

    ```java
    // add <E> 声明泛型
    public class GenArray<E> {
      private E[] data;
      private int size;

      // 构造函数， 传入数组的容量capacity构造DynaArray
      public GenArray(int capacity) {
        data = (E[])new Object[capacity];
        size = 0;
      }

      // 无参数的构造函数，默认容量capacity为10
      public GenArray() {
        this(10);
      }

      // 获取数组中的元素个数
      public int getSize() {
        return size;
      }

      // 获取数组的容量
      public int getCapacity() {
        return data.length;
      }

      // 查询数组是否为空
      public boolean isEmpty() {
        return size == 0;
      }

      // 向数组末尾添加元素
      public void addLast(E e) {
        add(size, e);
      }

      // 向数组头部添加元素
      public void addFirst(E e) {
        add(0, e);
      }

      // 向指定位置添加元素
      public void add(int index, E e) {
        if (size >= data.length) {
          throw new IllegalArgumentException("addLast Failed, Array is full");
        }
        if (index < 0 || index > size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        for (int i = size - 1; i >= index; i--) {
          data[i + 1] = data[i];
        }
        data[index] = e;
        size++;
      }

      // 获取index索引位置的元素
      public E get(int index) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        return data[index];
      }

      // 更新index索引位置的元素
      public void set(int index, E e) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        data[index] = e;
      }
      // 查找数组中是否有元素e
      public boolean contains(E e) {
        for (E d : data) {
          if (d.equals(e)) {
            return true;
          }
        }
        return false;
      }
      // 查找包含元素的索引,如果不存在，返回-1
      public int find(E e) {
        for (int i = 0; i < size; i++) {
            if (data[i].equals(e)) {
            return i;
          }
        }
        return -1;
      }

      // 删除索引位置的元素，返回删除的元素
      public E remove(int index) {
        if (index < 0 || index >= size) {
          throw new IllegalArgumentException("addLast Failed, require index >= 0 and index <= size");
        }
        E deleted = data[index];

        for (int i = index + 1; i < size; i++) {
          data[i - 1] = data[i];
        }
        size--;
        data[size] = null;          // loitering objects != memory leak, not necessary
        return deleted;
      }

      // 快捷删除第一个
      public E removeFirst() {
        return remove(0);
      }

      // 快捷删除最后一个
      public E removeLast() {
        return remove(size - 1);
      }

      // 删除元素e
      public void removeElement(E e) {
        int idx = find(e);
        if (idx != -1) {
          remove(idx);
        }
      }

      @Override
      public String toString() {
        StringBuilder res = new StringBuilder();
        res.append(String.format("General Dynamic Array: size=%d, capacity=%d\n", size, data.length));
        res.append("[");
        for (int i = 0; i < size; i++) {
          // res.append(String.format("%d", data[i]));
          res.append(data[i]);
          if (i != size - 1) {
            res.append(", ");
          }
        }
        res.append("]");

        return res.toString();
      }

      public static void main(String[] args) {
        GenArray<Integer> arr = new GenArray<Integer>(20);
        for (int i = 0; i < 10; i++) {
          arr.addLast(i);
        }
        System.out.println(arr);

        arr.add(1, 100);
        System.out.println(arr);

        arr.addFirst(-5);
        System.out.println(arr);

        arr.remove(2);
        System.out.println(arr);

        arr.removeFirst();
        System.out.println(arr);

        arr.removeElement(4);
        System.out.println(arr);
      }
    }
    ```

    ```text
    General Dynamic Array: size=10, capacity=20
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    General Dynamic Array: size=11, capacity=20
    [0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    General Dynamic Array: size=12, capacity=20
    [-5, 0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    General Dynamic Array: size=11, capacity=20
    [-5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    General Dynamic Array: size=10, capacity=20
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    General Dynamic Array: size=9, capacity=20
    [0, 1, 2, 3, 5, 6, 7, 8, 9]
    ```
